// =============================================
// SPI Master Testbench - Auto-generated by SPI Customizer
// =============================================

`timescale 1ns / 1ps

module spi_master_tb;

    // Parameters
    parameter MODE = {{ mode }};
    parameter DATA_WIDTH = {{ data_width }};
    parameter NUM_SLAVES = {{ num_slaves }};
    parameter SLAVE_ACTIVE_LOW = {{ slave_active_low | int }};
    parameter MSB_FIRST = {{ msb_first | int }};
    parameter FIFO_DEPTH = {{ fifo_depth }};
    parameter CLOCK_DIVIDER = {{ clock_divider }};
    parameter DEFAULT_DATA_ENABLED = {{ default_data_enabled | int }};
    parameter DEFAULT_DATA_PATTERN = "{{ default_data_pattern }}";
    parameter DEFAULT_DATA_VALUE = 16'h{{ default_data_value }};

    // Signals
    reg clk;
    reg rst_n;
    reg start_tx;
    reg start_rx;
    reg [DATA_WIDTH-1:0] tx_data;
    wire [DATA_WIDTH-1:0] rx_data;
    wire busy;
    wire sclk;
    wire mosi;
    reg miso;
    wire [NUM_SLAVES-1:0] ss_n;
    wire irq;

    // DUT instantiation
    spi_master #(
        .MODE(MODE),
        .DATA_WIDTH(DATA_WIDTH),
        .NUM_SLAVES(NUM_SLAVES),
        .SLAVE_ACTIVE_LOW(SLAVE_ACTIVE_LOW),
        .MSB_FIRST(MSB_FIRST),
        .FIFO_DEPTH(FIFO_DEPTH),
        .CLOCK_DIVIDER(CLOCK_DIVIDER),
        .DEFAULT_DATA_ENABLED(DEFAULT_DATA_ENABLED),
        .DEFAULT_DATA_PATTERN(DEFAULT_DATA_PATTERN),
        .DEFAULT_DATA_VALUE(DEFAULT_DATA_VALUE)
    ) dut (
        .clk(clk),
        .rst_n(rst_n),
        .start_tx(start_tx),
        .start_rx(start_rx),
        .tx_data(tx_data),
        .rx_data(rx_data),
        .busy(busy),
        .sclk(sclk),
        .mosi(mosi),
        .miso(miso),
        .ss_n(ss_n),
        .irq(irq)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #10 clk = ~clk;  // 50MHz clock
    end

    // Test sequence for master mode
    initial begin
        // Initialize
        rst_n = 0;
        start_tx = 0;
        start_rx = 0;
        tx_data = 0;
        miso = 0;

        #100;
        rst_n = 1;
        #200;  // Allow system to stabilize

        $display("=== SPI Master RTL Testbench Starting ===");
        $display("Configuration: Mode %d, %d-bit data, %d slaves", MODE, DATA_WIDTH, NUM_SLAVES);

        // Test core SPI functionality (optimized for speed)
        $display("--- Testing Core SPI Functionality ---");

        // Test 1: Basic data transmission
        {% if num_slaves > 0 %}
        {% if data_width == 32 %}
        tx_data = 32'hAA55FF00;  // Simplified 32-bit test pattern
        {% elif data_width >= 16 %}
        tx_data = 16'hAA55;
        {% else %}
        tx_data = 8'hA5;
        {% endif %}
        $display("TX Data: 0x%h", tx_data);
        start_tx = 1;
        #50;
        start_tx = 0;

        wait (!busy);
        $display("✓ Transmission complete");

        // Brief delay between transactions
        #200;
        {% endif %}

        // Test 2: Different data pattern (test MSB/LSB order)
        {% if data_width == 32 %}
        tx_data = 32'hFFFF0000;  // Alternative 32-bit test pattern
        {% elif data_width >= 16 %}
        tx_data = 16'h5555;
        {% else %}
        tx_data = 8'h55;
        {% endif %}
        $display("TX Data: 0x%h", tx_data);
        start_tx = 1;
        #50;
        start_tx = 0;

        wait (!busy);
        $display("✓ Second transmission complete");

        // Test reception (simplified for speed)
        $display("--- Testing Reception ---");

        {% if num_slaves > 0 %}
        // Prepare to receive data from slave 0
        start_rx = 1;
        #50;
        start_rx = 0;

        // Simulate slave providing response data
        #200;
        miso = {{ "1'b1" if (mode in [1,3]) else "1'b0" }};  // Data bit based on CPHA

        wait (!busy);
        $display("✓ Reception complete");
        {% endif %}

        // Test 3: Quick burst transmission (simplified)
        $display("--- Testing Burst Transmission ---");
        tx_data = {{ "16'hFF00" if data_width >= 16 else "8'hF0" }};
        $display("Burst TX: 0x%h", tx_data);
        start_tx = 1;
        #30;
        start_tx = 0;

        wait (!busy);
        $display("✓ Burst transmission complete");

        // Test 4: Quick configuration test
        $display("--- Testing Configuration ---");
        {% if data_width == 32 %}
        tx_data = 32'hABCD1234;  // 32-bit config test pattern
        {% elif data_width >= 16 %}
        tx_data = 16'hABCD;
        {% else %}
        tx_data = 8'hAB;
        {% endif %}
        $display("Config TX: 0x%h", tx_data);
        start_tx = 1;
        #30;
        start_tx = 0;

        wait (!busy);
        $display("✓ Configuration test complete");

        $display("=== All Master Tests Completed Successfully ===");
        $finish;
    end

    // VCD dumping
    initial begin
        $dumpfile("{{ vcd_filename }}");
        $dumpvars(0, spi_master_tb);
    end

endmodule
