// =============================================
// SPI Slave Testbench - Auto-generated by SPI Customizer
// =============================================

`timescale 1ns / 1ps

module spi_slave_tb;

    // Parameters
    parameter MODE = 0;
    parameter DATA_WIDTH = 8;
    parameter NUM_SLAVES = 1;
    parameter SLAVE_ACTIVE_LOW = 1;
    parameter MSB_FIRST = 1;
    parameter FIFO_DEPTH = 16;
    parameter MAX_SLAVES = 16;
    parameter DEFAULT_DATA_ENABLED = 0;
    parameter DEFAULT_DATA_PATTERN = "0000";
    parameter DEFAULT_DATA_VALUE = 16'hA5A5;

    // Signals
    reg clk;
    reg rst_n;
    reg sclk_in;
    reg mosi_in;
    wire miso_out;
    reg ss_in;
    reg [DATA_WIDTH-1:0] tx_data;
    wire [DATA_WIDTH-1:0] rx_data;
    wire rx_valid;
    wire tx_ready;
    wire busy;
    wire irq;

    // DUT instantiation
    spi_slave #(
        .MODE(MODE),
        .DATA_WIDTH(DATA_WIDTH),
        .SLAVE_ACTIVE_LOW(SLAVE_ACTIVE_LOW),
        .MSB_FIRST(MSB_FIRST),
        .FIFO_DEPTH(FIFO_DEPTH),
        .MAX_SLAVES(MAX_SLAVES),
        .DEFAULT_DATA_ENABLED(DEFAULT_DATA_ENABLED),
        .DEFAULT_DATA_PATTERN(DEFAULT_DATA_PATTERN),
        .DEFAULT_DATA_VALUE(DEFAULT_DATA_VALUE)
    ) dut (
        .clk(clk),
        .rst_n(rst_n),
        .sclk(sclk_in),
        .mosi(mosi_in),
        .miso(miso_out),
        .ss_n(ss_in),
        .rx_data(rx_data),
        .tx_data(tx_data),
        .rx_valid(rx_valid),
        .tx_ready(tx_ready),
        .tx_valid(tx_ready),  // Slave uses tx_ready as tx_valid input
        .busy(busy),
        .irq(irq),
        .irq_clear(1'b0)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #10 clk = ~clk;  // 50MHz clock
    end

    // Test sequence for slave mode
    initial begin
        // Initialize
        rst_n = 0;
        sclk_in = 0;
        mosi_in = 0;
        ss_in = 1;  // Deactivate slave select initially
        tx_data = 0;

        #100;
        rst_n = 1;
        #200;  // Allow system to stabilize

        $display("=== SPI Slave RTL Testbench Starting ===");
        $display("Configuration: Mode %d, %d-bit data, Slave mode", MODE, DATA_WIDTH);

        // Act as master to test the slave
        $display("--- Testing Slave with Master Transactions ---");

        // Test 1: Basic slave transaction
        sclk_in = 0;
        mosi_in = 0;
        ss_in = 1;  // Slave not selected initially

        #100;
        ss_in = 0;  // Select slave
        $display("Slave selected - starting transaction");

        // Generate a few SPI clock cycles to test slave response
        repeat (8) begin  // 8 bits
            #50;
            sclk_in = ~sclk_in;
            if (sclk_in) begin
                mosi_in = $random % 2;  // Random data from "master"
            end
        end

        #100;
        ss_in = 1;  // Deselect slave
        $display("✓ Slave transaction test complete");

        // Test 2: Multiple transactions
        #200;
        ss_in = 0;
        $display("Starting second slave transaction");

        repeat (16) begin  // 16 bits
            #25;
            sclk_in = ~sclk_in;
        end

        #100;
        ss_in = 1;
        $display("✓ Second slave transaction complete");

        $display("=== All Slave Tests Completed Successfully ===");
        $finish;
    end

    // VCD dumping
    initial begin
        $dumpfile("spi_waveform.vcd");
        $dumpvars(0, spi_slave_tb);
    end

endmodule